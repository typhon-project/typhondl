import weather_warning_ML.xmi
import TextWarningData.tdl
import AppData.tdl
platformtype default
containertype Docker
platform platformName : default {
	cluster clusterName {
		network typhon
		application Polystore {
			container polystore_api : Docker {
				deploys polystore_api
				depends_on polystoredb
				container_name = typhonml.polystore.service ;
				ports [ 8080:8080 ]
				volumes [ ./models:/models ]
			}
			container polystore_ui : Docker {
				deploys polystore_ui
				depends_on polystore_api
				container_name = polystore.ui ;
				ports [ 4200:4200 ]
			}
			container polystoredb : Docker {
				deploys polystoredb
				container_name = polystore.mongo ;
				ports [ 27017:27017 ]
			}
			container zookeeper : Docker {
				deploys zookeeper
				networks typhon
				container_name = zookeeper ;
				ports [ 2181:2181 ]
			}
			container kafka : Docker {
				depends_on zookeeper
				networks typhon
				build = . ;
				container_name = kafka ;
				ports [ 9092:9092 ]
				volumes [ /var/run/docker.sock:/var/run/docker.sock ]
				environment {
					KAFKA_ZOOKEEPER_CONNECT = zookeeper:2181 ;
					KAFKA_ADVERTISED_HOST_NAME = kafka ;
					KAFKA_LISTENERS = PLAINTEXT://:29092, PLAINTEXT://:29093, PLAINTEXT_HOST://:9092 ;
					KAFKA_LISTENER_SECURITY_PROTOCOL_MAP = PLAINTEXT:PLAINTEXT, PLAINTEXT_HOST:PLAINTEXT ;
					KAFKA_INTER_BROKER_LISTENER_NAME = PLAINTEXT ;
					KAFKA_ADVERTISED_LISTENERS = PLAINTEXT://kafka:29092, PLAINTEXT://kafka:29093, PLAINTEXT_HOST://localhost:9092 ;
					KAFKA_AUTO_CREATE_TOPICS_ENABLE = "true" ;
				}
			}
			container TextWarningData : Docker {
				deploys TextWarningData
				ports [ 27018:27017 ]
			}
			container AppData : Docker {
				deploys AppData
				ports [ 3306:3306 ]
			}
		}
	}
}
