/*
 * generated by Xtext 2.15.0
 */
package de.atb.typhondl.xtext.ui.wizard


import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class TyphonDLProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new DockerCompose, new Kubernetes]
	}
}

@ProjectTemplate(label="Docker-Compose", icon="docker.png", description="<p><b>Docker-Combose</b></p>
<p>Descriptive text about using Docker-Compose</p>")
final class DockerCompose {
	val advanced = check("Advanced Compose Properties:", false)
	val advancedGroup = group("Properties")
	val name = text("Name:", "MyApplication", advancedGroup)
	val path = text("Package:", "mydsl", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		name.enabled = advanced.value
		path.enabled = advanced.value
		if (!advanced.value) {
			name.value = "MyApplication"
			path.value = "tdl"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += "model"
			addFile('''model/«name».tdl''', '''
				/*
				 * This is an example model
				 */
				Hello «name»!
			''')
		])
	}
}

@ProjectTemplate(label="Kubernetes", icon="kubernetes.png", description="<p><b>Kubernetes</b></p>
<p>Descriptive text about using Kubernetes</p>")
final class Kubernetes {
	val requiredGroup = group("Required Properties")
	val numberOfNodes = text("Number of max. nodes:", "", requiredGroup)
	val advanced = check("Advanced Kubernetes Properties:", false)
	val advancedGroup = group("Properties")
	val name = text("Name:", "MyApplication", advancedGroup)
	val path = text("Package:", "mydsl", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		name.enabled = advanced.value
		path.enabled = advanced.value
		if (!advanced.value) {
			name.value = "MyApplication"
			path.value = "tdl"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += "model"
			addFile('''model/«name».tdl''', '''
				/*
				 * This is an example model
				 */
				Hello «name»!
			''')
		])
	}
}
