/*
 * generated by Xtext 2.15.0
 */
package de.atb.typhondl.xtext.ui.wizard

import org.eclipse.core.runtime.Status
import org.eclipse.jdt.core.JavaCore
import org.eclipse.xtext.ui.XtextProjectHelper
import org.eclipse.xtext.ui.util.PluginProjectFactory
import org.eclipse.xtext.ui.wizard.template.IProjectGenerator
import org.eclipse.xtext.ui.wizard.template.IProjectTemplateProvider
import org.eclipse.xtext.ui.wizard.template.ProjectTemplate

import static org.eclipse.core.runtime.IStatus.*

/**
 * Create a list with all project templates to be shown in the template new project wizard.
 * 
 * Each template is able to generate one or more projects. Each project can be configured such that any number of files are included.
 */
class TyphonDLProjectTemplateProvider implements IProjectTemplateProvider {
	override getProjectTemplates() {
		#[new DockerCompose, new Kubernetes]
	}
}

@ProjectTemplate(label="Docker-Compose", icon="docker.png", description="<p><b>Docker-Compose</b></p>
<p>Descriptive text about using Docker-Compose</p>")
final class DockerCompose {
	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			val info = projectInfo as MyProjectInfo
			var data = info.data;
			var appName = "MyApplication" //TODO where to get this from?
			projectNatures += #["org.eclipse.sirius.nature.modelingproject",
								XtextProjectHelper.NATURE_ID]
			builderIds += #[XtextProjectHelper.BUILDER_ID]
			folders += "model" // TODO: «data.forEach[key, value| doStuff]»
			addFile('''model/«appName».tdl''', '''
				platformtype default //TODO (e.g. AWS)
				containertype Docker
				«FOR key : data.keySet»
					dbtype «data.get(key).type»
				«ENDFOR»	
				
				platform platformname : default { //TODO
					cluster clustername { //TODO
						application applicationName { //TODO
							«FOR key : data.keySet»
								container «data.get(key).name» : Docker {
									dbType : «data.get(key).type»
									dbms = «data.get(key).dbms»
									image = «data.get(key).dbms.toLowerCase»:latest // TODO
									// TODO: evironment, volumes, networks, ports etc.
								}
							«ENDFOR»	
						}
					}
				}					
			''')
			addFile('''representation.aird''','''
			<?xml version="1.0" encoding="UTF-8"?>
			<viewpoint:DAnalysis xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:viewpoint="http://www.eclipse.org/sirius/1.1.0" xmi:id="_QL4C8OyqEeiO5ZfTEpz-IQ" version="13.0.0.201804031646">
			  <semanticResources>model/«appName».tdl</semanticResources>
			</viewpoint:DAnalysis>
			''')
		])
	}
	
	def showData(String string, Database database) {
		'''«string» («database.type») : «database.dbms»
		'''
	}
	
}

@ProjectTemplate(label="Kubernetes", icon="kubernetes.png", description="<p><b>Kubernetes</b></p>
<p>Descriptive text about using Kubernetes</p>")
final class Kubernetes {
	val requiredGroup = group("Required Properties")
	var numberOfNodes = text("Number of max. nodes:", "", requiredGroup)
	val advanced = check("Advanced Kubernetes Properties:", false)
	val advancedGroup = group("Properties")
	var name = text("Name:", "MyApplication", advancedGroup)
	var path = text("Package:", "mydsl", "The package path to place the files in", advancedGroup)

	override protected updateVariables() {
		name.enabled = advanced.value
		path.enabled = advanced.value
		if (!advanced.value) {
			name.value = "MyApplication"
			path.value = "tdl"
		}
	}

	override protected validate() {
		if (path.value.matches('[a-z][a-z0-9_]*(/[a-z][a-z0-9_]*)*'))
			null
		else
			new Status(ERROR, "Wizard", "'" + path + "' is not a valid package name")
	}

	override generateProjects(IProjectGenerator generator) {
		generator.generate(new PluginProjectFactory => [
			projectName = projectInfo.projectName
			location = projectInfo.locationPath
			projectNatures += #[JavaCore.NATURE_ID, "org.eclipse.pde.PluginNature", XtextProjectHelper.NATURE_ID]
			builderIds += #[JavaCore.BUILDER_ID, XtextProjectHelper.BUILDER_ID]
			folders += "model"
			addFile('''model/«name».tdl''', '''
				/*
				 * This is an example model
				 */
				Hello «name»!
			''')
		])
	}
}
