/*-
 * #%L
 * de.atb.typhondl.xtext.ui
 * %%
 * Copyright (C) 2018 - 2020 ATB
 * %%
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License, v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is
 * available at https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 * #L%
 */
/*
 * generated by Xtext 2.19.0
 */
package de.atb.typhondl.xtext.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class TyphonDLQuickfixProvider extends DefaultQuickfixProvider {

//	@Fix(TyphonDLValidator.COLON_IN_PORTS)
//	def splitPortInList(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, "Split port", "Split port into internal and published", null,
//			new ISemanticModification() {
//				override apply(EObject element, IModificationContext context) throws Exception {
//					// retrieve
//					val keyValue = element as Key_Values
//					val container = keyValue.eContainer as Container
//					// split
//					val value = keyValue.value.split(':')
//					val published = TyphonDLFactory.eINSTANCE.createKey_Values
//					published.name = "publishedPort"
//					published.value = value.get(0)
//					val internal = TyphonDLFactory.eINSTANCE.createKey_Values
//					internal.name = "containerPort"
//					internal.value = value.get(1)
//
//					// new Key_KeyValueList
//					val list = TyphonDLFactory.eINSTANCE.createKey_KeyValueList
//					list.name = "ports"
//					list.key_Values.add(internal)
//					list.key_Values.add(published)
//
//					// add to model remove old Key_Values
//					container.properties.add(list)
//					container.properties.remove(keyValue)
//				}
//			})
//	}

//	@Fix(TyphonDLValidator.INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
}
