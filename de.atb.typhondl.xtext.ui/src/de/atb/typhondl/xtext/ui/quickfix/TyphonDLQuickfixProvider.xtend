/*
 * generated by Xtext 2.19.0
 */
package de.atb.typhondl.xtext.ui.quickfix

import org.eclipse.xtext.ui.editor.quickfix.DefaultQuickfixProvider
import org.eclipse.xtext.validation.Issue
import org.eclipse.xtext.ui.editor.quickfix.IssueResolutionAcceptor
import org.eclipse.xtext.ui.editor.quickfix.Fix
import de.atb.typhondl.xtext.validation.TyphonDLValidator
import org.eclipse.xtext.ui.editor.model.edit.ISemanticModification
import org.eclipse.xtext.ui.editor.model.edit.IModificationContext
import org.eclipse.emf.ecore.EObject
import de.atb.typhondl.xtext.typhonDL.Key_Values
import de.atb.typhondl.xtext.typhonDL.TyphonDLFactory
import de.atb.typhondl.xtext.typhonDL.Container

/**
 * Custom quickfixes.
 * 
 * See https://www.eclipse.org/Xtext/documentation/310_eclipse_support.html#quick-fixes
 */
class TyphonDLQuickfixProvider extends DefaultQuickfixProvider {

	@Fix(TyphonDLValidator.COLON_IN_PORTS)
	def splitPortInList(Issue issue, IssueResolutionAcceptor acceptor) {
		acceptor.accept(issue, "Split port", "Split port into internal and published", null,
			new ISemanticModification() {
				override apply(EObject element, IModificationContext context) throws Exception {
					// retrieve
					val keyValue = element as Key_Values
					val container = keyValue.eContainer as Container
					// split
					val value = keyValue.value.split(':')
					val published = TyphonDLFactory.eINSTANCE.createKey_Values
					published.name = "publishedPort"
					published.value = value.get(0)
					val internal = TyphonDLFactory.eINSTANCE.createKey_Values
					internal.name = "containerPort"
					internal.value = value.get(1)

					// new Key_KeyValueList
					val list = TyphonDLFactory.eINSTANCE.createKey_KeyValueList
					list.name = "ports"
					list.key_Values.add(internal)
					list.key_Values.add(published)

					// add to model remove old Key_Values
					container.properties.add(list)
					container.properties.remove(keyValue)
				}
			})
	}

//	@Fix(TyphonDLValidator.INVALID_NAME)
//	def capitalizeName(Issue issue, IssueResolutionAcceptor acceptor) {
//		acceptor.accept(issue, 'Capitalize name', 'Capitalize the name.', 'upcase.png') [
//			context |
//			val xtextDocument = context.xtextDocument
//			val firstLetter = xtextDocument.get(issue.offset, 1)
//			xtextDocument.replace(issue.offset, 1, firstLetter.toUpperCase)
//		]
//	}
}
