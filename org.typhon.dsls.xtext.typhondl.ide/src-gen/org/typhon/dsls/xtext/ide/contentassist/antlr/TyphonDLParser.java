/*
 * generated by Xtext 2.15.0
 */
package org.typhon.dsls.xtext.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.typhon.dsls.xtext.ide.contentassist.antlr.internal.InternalTyphonDLParser;
import org.typhon.dsls.xtext.services.TyphonDLGrammarAccess;

public class TyphonDLParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(TyphonDLGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, TyphonDLGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getTypeAccess().getAlternatives(), "rule__Type__Alternatives");
			builder.put(grammarAccess.getDeploymentAccess().getAlternatives(), "rule__Deployment__Alternatives");
			builder.put(grammarAccess.getContainerAccess().getAlternatives_4(), "rule__Container__Alternatives_4");
			builder.put(grammarAccess.getServiceAccess().getAlternatives(), "rule__Service__Alternatives");
			builder.put(grammarAccess.getPropertyAccess().getAlternatives(), "rule__Property__Alternatives");
			builder.put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
			builder.put(grammarAccess.getDataTypeAccess().getGroup(), "rule__DataType__Group__0");
			builder.put(grammarAccess.getPlatformTypeAccess().getGroup(), "rule__PlatformType__Group__0");
			builder.put(grammarAccess.getDBTypeAccess().getGroup(), "rule__DBType__Group__0");
			builder.put(grammarAccess.getPlatformAccess().getGroup(), "rule__Platform__Group__0");
			builder.put(grammarAccess.getClusterAccess().getGroup(), "rule__Cluster__Group__0");
			builder.put(grammarAccess.getApplicationAccess().getGroup(), "rule__Application__Group__0");
			builder.put(grammarAccess.getContainerAccess().getGroup(), "rule__Container__Group__0");
			builder.put(grammarAccess.getDBServiceAccess().getGroup(), "rule__DBService__Group__0");
			builder.put(grammarAccess.getBusinessServiceAccess().getGroup(), "rule__BusinessService__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup(), "rule__Entity__Group__0");
			builder.put(grammarAccess.getEntityAccess().getGroup_2(), "rule__Entity__Group_2__0");
			builder.put(grammarAccess.getEnvListAccess().getGroup(), "rule__EnvList__Group__0");
			builder.put(grammarAccess.getAssignmentListAccess().getGroup(), "rule__AssignmentList__Group__0");
			builder.put(grammarAccess.getCommaSeparatedAssignmentListAccess().getGroup(), "rule__CommaSeparatedAssignmentList__Group__0");
			builder.put(grammarAccess.getCommaSeparatedAssignmentListAccess().getGroup_3(), "rule__CommaSeparatedAssignmentList__Group_3__0");
			builder.put(grammarAccess.getAssignmentAccess().getGroup(), "rule__Assignment__Group__0");
			builder.put(grammarAccess.getFeatureAccess().getGroup(), "rule__Feature__Group__0");
			builder.put(grammarAccess.getDeploymentModelAccess().getElementsAssignment(), "rule__DeploymentModel__ElementsAssignment");
			builder.put(grammarAccess.getDataTypeAccess().getNameAssignment_1(), "rule__DataType__NameAssignment_1");
			builder.put(grammarAccess.getPlatformTypeAccess().getNameAssignment_1(), "rule__PlatformType__NameAssignment_1");
			builder.put(grammarAccess.getDBTypeAccess().getNameAssignment_1(), "rule__DBType__NameAssignment_1");
			builder.put(grammarAccess.getPlatformAccess().getNameAssignment_2(), "rule__Platform__NameAssignment_2");
			builder.put(grammarAccess.getPlatformAccess().getTypeAssignment_4(), "rule__Platform__TypeAssignment_4");
			builder.put(grammarAccess.getPlatformAccess().getClustersAssignment_6(), "rule__Platform__ClustersAssignment_6");
			builder.put(grammarAccess.getClusterAccess().getNameAssignment_2(), "rule__Cluster__NameAssignment_2");
			builder.put(grammarAccess.getClusterAccess().getApplicationsAssignment_4(), "rule__Cluster__ApplicationsAssignment_4");
			builder.put(grammarAccess.getApplicationAccess().getNameAssignment_2(), "rule__Application__NameAssignment_2");
			builder.put(grammarAccess.getApplicationAccess().getContainersAssignment_4(), "rule__Application__ContainersAssignment_4");
			builder.put(grammarAccess.getContainerAccess().getNameAssignment_2(), "rule__Container__NameAssignment_2");
			builder.put(grammarAccess.getContainerAccess().getPropertiesAssignment_4_0(), "rule__Container__PropertiesAssignment_4_0");
			builder.put(grammarAccess.getContainerAccess().getFeaturesAssignment_4_1(), "rule__Container__FeaturesAssignment_4_1");
			builder.put(grammarAccess.getDBServiceAccess().getNameAssignment_1(), "rule__DBService__NameAssignment_1");
			builder.put(grammarAccess.getDBServiceAccess().getFeaturesAssignment_3(), "rule__DBService__FeaturesAssignment_3");
			builder.put(grammarAccess.getBusinessServiceAccess().getNameAssignment_1(), "rule__BusinessService__NameAssignment_1");
			builder.put(grammarAccess.getBusinessServiceAccess().getFeaturesAssignment_3(), "rule__BusinessService__FeaturesAssignment_3");
			builder.put(grammarAccess.getEntityAccess().getNameAssignment_1(), "rule__Entity__NameAssignment_1");
			builder.put(grammarAccess.getEntityAccess().getSuperTypeAssignment_2_1(), "rule__Entity__SuperTypeAssignment_2_1");
			builder.put(grammarAccess.getEntityAccess().getFeaturesAssignment_4(), "rule__Entity__FeaturesAssignment_4");
			builder.put(grammarAccess.getEnvListAccess().getEnvironmentVarsAssignment_2(), "rule__EnvList__EnvironmentVarsAssignment_2");
			builder.put(grammarAccess.getAssignmentListAccess().getNameAssignment_0(), "rule__AssignmentList__NameAssignment_0");
			builder.put(grammarAccess.getAssignmentListAccess().getAssignmentsAssignment_2(), "rule__AssignmentList__AssignmentsAssignment_2");
			builder.put(grammarAccess.getCommaSeparatedAssignmentListAccess().getNameAssignment_0(), "rule__CommaSeparatedAssignmentList__NameAssignment_0");
			builder.put(grammarAccess.getCommaSeparatedAssignmentListAccess().getValueAssignment_2(), "rule__CommaSeparatedAssignmentList__ValueAssignment_2");
			builder.put(grammarAccess.getCommaSeparatedAssignmentListAccess().getValuesAssignment_3_1(), "rule__CommaSeparatedAssignmentList__ValuesAssignment_3_1");
			builder.put(grammarAccess.getAssignmentAccess().getNameAssignment_0(), "rule__Assignment__NameAssignment_0");
			builder.put(grammarAccess.getAssignmentAccess().getValueAssignment_2(), "rule__Assignment__ValueAssignment_2");
			builder.put(grammarAccess.getFeatureAccess().getNameAssignment_0(), "rule__Feature__NameAssignment_0");
			builder.put(grammarAccess.getFeatureAccess().getTypeAssignment_2(), "rule__Feature__TypeAssignment_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private TyphonDLGrammarAccess grammarAccess;

	@Override
	protected InternalTyphonDLParser createParser() {
		InternalTyphonDLParser result = new InternalTyphonDLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TyphonDLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TyphonDLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
