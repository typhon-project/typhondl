[comment encoding = UTF-8 /]
[module utilityGenerator('http://www.typhon.org/dsls/xtext/TyphonDL')]

[query public getAllDatabases(aDeploymentModel : DeploymentModel) : OrderedSet(DB) = 
 aDeploymentModel.elements->filter(typhonDL::DB)
/]

[query public getAllClusters(aDeploymentModel : DeploymentModel) : Sequence(Cluster) = 
 aDeploymentModel.elements->filter(typhonDL::Platform).clusters 
/]

[query public getAllApplications(aCluster : Cluster) : OrderedSet(Application) = 
 aCluster.applications
/]

[query public getAllContainers(aApplication : Application) : OrderedSet(Container) =
 aApplication.containers 
/]

[query public isDockerCompose(aCluster : Cluster) : Boolean = 
aCluster.type.name->any(str | str='DockerCompose')<>null
/]

[query public isKubernetes(aCluster : Cluster) : Boolean = 
aCluster.type.name->any(str | str='Kubernetes') <> null
/]

[query public isDockerCompose(aDeploymentModel : DeploymentModel) : Boolean = 
aDeploymentModel.elements->filter(typhonDL::ClusterType).name->any(str | str='DockerCompose')<>null
/]

[query public isKubernetes(aDeploymentModel : DeploymentModel) : Boolean = 
aDeploymentModel.elements->filter(typhonDL::ClusterType).name->any(str | str='Kubernetes') <> null
/]

[query public getPublishedPort(aPorts : Ports) : Key_Values = 
aPorts.key_values->any(key | key.name='published')
/]

[query public getTargetPort(aPorts : Ports) : Key_Values = 
aPorts.key_values->any(key | key.name='target') 
/]

[query public getMongoPrint(aContainer : Container) : String =
aContainer.properties->any(key | key.name='print').oclAsType(Key_Values).value
/]

[query public getKubeconfig(aCluster : Cluster) : Key_Values =
aCluster.properties->any(key | key.name.equalsIgnoreCase('kubeconfig'))
/]

[query public createAnalytics(aDeploymentModel : DeploymentModel) : Boolean =
aDeploymentModel.getAllClusters().applications.containers->any(key | key.name.equalsIgnoreCase('kafka'))<>null
/]

[query public isPolystoreContainer(aContainer : Container) : Boolean = 
((aContainer.name.toLower() = 'kafka')
    ._or(aContainer.name.toLower() = 'zookeeper')
    ._or(aContainer.name.toLower() = 'authall')
    ._or(aContainer.name.toLower() = 'typhon-polystore-service')
    ._or(aContainer.name.toLower() = 'polystore-ui')
    ._or(aContainer.name.toLower() = 'typhonql-server')) 
/]

[query public containsDB(aContainer : Container) : Boolean = aContainer.deploys.reference.oclIsTypeOf(DB) /]

[query public getKafkaVersion(aContainer : Container) : String =
aContainer.deploys.reference.oclAsType(Software).parameters->any(key | key.name.equalsIgnoreCase('version')).oclAsType(Key_Values).value
/]

[query public useHelmChart(aContainer : Container) : Boolean =  
not(aContainer.getHelmList().oclIsUndefined())
/]

[query public getHelmList(aContainer : Container) : HelmList =  
aContainer.deploys.reference.oclAsType(DB).helm
/]

[query public getHelmRepoAddress(aContainer : Container) : String =
aContainer.getHelmList().repoAddress
/]

[query public getHelmRepoName(aContainer : Container) : String = 
aContainer.getHelmList().repoName
/]

[query public getHelmChart(aContainer : Container) : String = 
aContainer.getHelmList().chartName
/]

[query public hasHelmValuesFile(aContainer : Container) : Boolean = 
not aContainer.getHelmList().parameters->any(key | key.name.equalsIgnoreCase('valuesFile')).oclIsUndefined()
/]

[query public getHelmValuesFile(aContainer : Container) : String =
aContainer.getHelmList().parameters->any(key | key.name.equalsIgnoreCase('valuesFile')).oclAsType(Key_Values).value
/]

[query public allowsUsername(typeName: String) : Boolean =  
typeName = 'mongo'
/]

[query public getPort(aURI : URI) : String =
aURI.value.substring(aURI.value.indexOf(':')+1)
/]

[query public getKafkaSoftware(aDeploymentModel : DeploymentModel) : Software = 
aDeploymentModel.elements->filter(typhonDL::Software)->any(software | software.name.equalsIgnoreCase('kafka'))
/]

[query public getZookeeperSoftware(aDeploymentModel : DeploymentModel) : Software = 
aDeploymentModel.elements->filter(typhonDL::Software)->any(software | software.name.equalsIgnoreCase('zookeeper'))
/]

[query public getKafkaContainer(aCluster : Cluster) : Container = 
aCluster.applications.containers->any(container | container.name.equalsIgnoreCase('kafka'))
/]

[query public getKafkaUri(aCluster : Cluster) : String =
aCluster.getKafkaContainer().uri.value
/]

[query public getZookeeperContainer(aCluster : Cluster) : Container = 
aCluster.applications.containers->any(container | container.name.equalsIgnoreCase('zookeeper'))
/]

[query public getZookeeperUri(aCluster : Cluster) : String =
aCluster.getZookeeperContainer().uri.value
/]

[query public getKubeconfig(aKafka : Software) : Key_Values =
aKafka.parameters->filter(typhonDL::Key_Values)->any(key | key.name.equalsIgnoreCase('kubeconfig'))
 /]



[query public getMongoUsernameKey(aTypeName : String) : String = 'MONGO_INITDB_ROOT_USERNAME'/]
[query public getMongoPasswordKey(aTypeName : String) : String = 'MONGO_INITDB_ROOT_PASSWORD'/]
[query public getMariaDBPasswordKey(aTypeName : String) : String = 'MYSQL_ROOT_PASSWORD'/]
[query public getNeo4jPasswordKey(aTypeName : String) : String = 'NEO4J_AUTH'/]

[template public getPasswordPreValue(aTypeName : String) post (trim())]
[if (aTypeName = 'neo4j')]neo4j/[/if]
[/template]

[template public getPasswordKey(aTypeName : String) post (trim())]
[if (aTypeName = 'mongo')][aTypeName.getMongoPasswordKey()/] [elseif ((aTypeName = 'mariadb') or (aTypeName = 'mysql'))][aTypeName.getMariaDBPasswordKey()/] [elseif (aTypeName = 'neo4j')][getNeo4jPasswordKey()/][/if]
[/template]


[template public getUsernameKey(aTypeName : String) post (trim())]
[if (aTypeName = 'mongo')]
[aTypeName.getMongoUsernameKey()/]
[/if]
[/template]
