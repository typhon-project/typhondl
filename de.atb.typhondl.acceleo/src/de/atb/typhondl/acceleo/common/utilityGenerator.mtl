[comment encoding = UTF-8 /]
[module utilityGenerator('http://www.typhon.org/dsls/xtext/TyphonDL')]

[query public getAllDatabases(aDeploymentModel : DeploymentModel) : OrderedSet(DB) = 
 aDeploymentModel.elements->filter(typhonDL::DB)
/]

[query public getAllClusters(aDeploymentModel : DeploymentModel) : Sequence(Cluster) = 
 aDeploymentModel.elements->filter(typhonDL::Platform).clusters 
/]

[query public getAllApplications(aCluster : Cluster) : OrderedSet(Application) = 
 aCluster.applications
/]

[query public getAllContainers(aApplication : Application) : OrderedSet(Container) =
 aApplication.containers 
/]

[query public isDockerCompose(aDeploymentModel : DeploymentModel) : Boolean = 
aDeploymentModel.elements->filter(typhonDL::ClusterType).name->any(str | str='DockerCompose')<>null
/]

[query public isKubernetes(aDeploymentModel : DeploymentModel) : Boolean = 
aDeploymentModel.elements->filter(typhonDL::ClusterType).name->any(str | str='Kubernetes') <> null
/]

[query public getPublishedPort(aPorts : Ports) : Key_Values = 
aPorts.key_values->any(key | key.name='published')
/]

[query public getTargetPort(aPorts : Ports) : Key_Values = 
aPorts.key_values->any(key | key.name='target') 
/]

[query public findReplicas(aContainer : Container) : Key_Values =
aContainer.properties->any(key | key.name='replicas')
/]

[query public getMongoPrint(aContainer : Container) : String =
aContainer.properties->any(key | key.name='print').oclAsType(Key_Values).value
/]

[query public getEnvironmentList(aContainer : Container) : Key_KeyValueList = 
aContainer.deploys.reference.parameters->any(key | (key.name='env')._or(key.name='environment'))
/]

[query public getMongoRootUser(aContainer : Container) : Key_Values =
aContainer.getEnvironmentList().properties->any(key | key.name='MONGO_INITDB_ROOT_USERNAME')
/]

[query public getMongoRootPassword(aContainer : Container) : Key_Values =
aContainer.getEnvironmentList().properties->any(key | key.name='MONGO_INITDB_ROOT_PASSWORD')
/]

[query public getKubeconfig(aCluster : Cluster) : Key_Values =
aCluster.properties->any(key | key.name.equalsIgnoreCase('kubeconfig'))
/]

[query public useAnalytics(aCluster : Cluster) : Boolean =
aCluster.applications.containers->any(key | key.name.equalsIgnoreCase('kafka'))<>null
/]

[query public isPolystoreContainer(aContainer : Container) : Boolean = 
((aContainer.name.toLower() = 'kafka')
    ._or(aContainer.name.toLower() = 'zookeeper')
    ._or(aContainer.name.toLower() = 'authall')
    ._or(aContainer.name.toLower() = 'typhon-polystore-service')
    ._or(aContainer.name.toLower() = 'polystore-ui')
    ._or(aContainer.name.toLower() = 'typhonql-server')) 
/]

[query public containsDB(aContainer : Container) : Boolean = aContainer.deploys.reference.oclIsTypeOf(DB) /]


[query public useHelmChart(aContainer : Container) : Boolean =  
not(aContainer.getHelmList().oclIsUndefined())
/]

[query public getHelmList(aContainer : Container) : HelmList =  
aContainer.deploys.reference.oclAsType(DB).helm
/]

[query public getHelmRepoAddress(aContainer : Container) : String =
aContainer.getHelmList().repoAddress
/]

[query public getHelmRepoName(aContainer : Container) : String = 
aContainer.getHelmList().repoName
/]

[query public getHelmChart(aContainer : Container) : String = 
aContainer.getHelmList().chartName
/]

[query public getMySQLPassword(aContainer : Container) : Key_Values =
aContainer.getEnvironmentList().properties->any(key | key.name='MYSQL_ROOT_PASSWORD')
/]

[query public convertCPUToKubernetes(aCPUString : String) : String = self /]

[query public convertMemoryToKubernetes(aMemoryString : String) : String = self /]



