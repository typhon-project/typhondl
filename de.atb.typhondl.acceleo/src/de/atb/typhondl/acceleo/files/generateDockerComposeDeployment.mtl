[comment encoding = UTF-8 /]
[module generateDockerComposeDeployment('http://www.typhon.org/dsls/xtext/TyphonDL', 'http://www.eclipse.org/emf/2002/Ecore')]

[import de::atb::typhondl::acceleo::common::utilityGenerator/]
[import de::atb::typhondl::acceleo::files::analyticsConfig/]

[template public generateDockerComposeDeployment(aDeploymentModel : DeploymentModel) post (trim())]

[for (aCluster : Cluster | aDeploymentModel.getAllClusters())]
[if (aCluster.name.equalsIgnoreCase('analyticsCluster'))]
[file ('analyticsDeployment.yaml', false, 'UTF-8')]
[aCluster.createYamlContent()/]
[/file]
[else]
[file ('docker-compose.yaml', false, 'UTF-8')]
[aCluster.createYamlContent()/]
[/file]
[/if]
[/for]
[/template]

[template public createYamlContent(aCluster : Cluster)]
version: '3.7'

[if (aCluster.networks <> null)]
[for (aNetwork : Cluster_Network | aCluster.networks)]
[aNetwork.print()/]
[/for]
[/if]
services:
[for (aContainer : Container | aCluster.applications.containers)]
  [aContainer.name/]:
[if (aContainer.deploys <> null)]
    [aContainer.deploys.reference.print()/]
[/if]
[if (not aContainer.depends_on -> isEmpty())]
    depends_on:
[for (aDependency : Dependency | aContainer.depends_on)]
      - [aDependency.reference.name/]
[/for]
[/if]
[if (aContainer.networks <> null)]
    [aContainer.networks.print()/]
[/if]
[if (aContainer.volumes <> null)]
    volumes:
[for (aVolumeProperties : Volume_Properties | aContainer.volumes.decls)]
[if (aVolumeProperties.volumeType <> null)]
      - type: [aVolumeProperties.volumeType/]
[/if]
[if (aVolumeProperties.volumeName <> null)]
        source: [aVolumeProperties.volumeName/]
        target: [aContainer.volumes.decls.volumePath.value/]
[else]
      - [aContainer.volumes.decls.volumePath.value/]
[if (not aContainer.volumes.decls.volumePath.values -> isEmpty())]
[for (aValue : ValueArray | aContainer.volumes.decls.volumePath)]    
      - [aValue.values/]
[/for]
[/if]
[/if]
[if (not aVolumeProperties.specifics -> isEmpty())]
[for (aProperty : Property | aVolumeProperties.specifics)]
        [aProperty.print()/]
[/for]
[/if]
[/for]
[/if]
[if (aContainer.ports <> null)]
    [aContainer.ports.print()/]
[/if]
[if (aContainer.resources <> null)]
    [aContainer.printResourcesAndReplication()/]
[elseif (aContainer.replication <> null)]
[if (aContainer.replication.mode = Modes::STATELESS)]
    [aContainer.replication.printStateless()/]
[/if]	
[/if]    
[if (not aContainer.properties -> isEmpty())]
[for (aProperty : Property | aContainer.properties)]
    [aProperty.print()/]
[/for]
[/if]
[if (aContainer.replication <> null and aContainer.containsDB())]
[aContainer.printDBReplication()/]
[/if]
[if (aContainer.name.equalsIgnoreCase('kafka'))]
[file ('typhonAnalyticsConfig.properties', false, 'UTF-8')]
[aCluster.analyticsConfig()/]
[/file]
[/if]
[/for]
[for (aApp : Application | aCluster.applications)]
[if (aApp.volumes <> null)]

volumes:
[if (not aApp.volumes.names -> isEmpty())]
[for (aVolumeName : EString | aApp.volumes.names)]
  [aVolumeName/]:
[/for]
[/if]
[if (not aApp.volumes.specifics -> isEmpty())]
[for (aProperty : Property | aApp.volumes.specifics)]
    [aProperty.print()/]
[/for]  
[/if]
[/if]
[/for]
[/template]

[template public printDBReplication(aContainer : Container)]
[if (aContainer.deploys.reference.oclAsType(DB).type.name.toLower() = 'mongo')]
    command: mongod --replSet [aContainer.name/]Replset
  [aContainer.printMongoRep()/][aContainer.printMongoInitFiles()/][/if]
[/template]

[template public printMongoRep(aContainer : Container) post(trim())]
[for (Sequence{1,2,3,4,5,6,7,8,9,10})]
[if (i <= aContainer.replication.replicas)]
[aContainer.name/]-replica[i/]:
  [aContainer.deploys.reference.oclAsType(DB).printImage()/]
  command: mongod --replSet [aContainer.name/]Replset
[/if][/for]
[aContainer.name/]-rsinit:
  build:
    context: .
    dockerfile: [aContainer.name/]/rsinit
  entrypoint: ['['/]
    'sh', 
    '-c', 
    'init_set.sh'
    [']'/] 
[/template]

[template public printMongoInitFiles(aContainer : Container)]
[file (aContainer.name + '/init_set.sh', false, 'UTF-8')]
#!/bin/bash
echo "sleeping for 10 seconds"
sleep 10

echo init_set.sh time now: `date +"%T" `
mongo --host [aContainer.uri.value/] <<EOF
  var cfg = {
    "_id": "[aContainer.name/]Replset",
    "version": 1,
    "members": ['['/]
      {
        "_id": 0,
        "host": "[aContainer.uri.value/]"
      }
[for (Sequence{1,2,3,4,5,6,7,8,9,10})]
[if (i <= aContainer.replication.replicas)]
      ,{
        "_id": [i/],
        "host": "[aContainer.name/]-replica[i/]:27017"
      }
[/if][/for]
    [']'/]
  };
  rs.initiate(cfg);
EOF
[/file]

[file (aContainer.name + '/rsinit', false, 'UTF-8')]
FROM mongo

ADD [aContainer.name/]/init_set.sh /usr/local/bin/

RUN chmod +x /usr/local/bin/init_set.sh
[/file]
[/template]

[template public print(aPorts : Ports) post (trim())]
ports:
  - target: [aPorts.getTargetPort().value/]
[for (aKey_Values : Key_Values | aPorts.key_values)]
    [if (not (aKey_Values.name = 'target'))]
    [aKey_Values.print()/]
    [/if]
[/for]
[/template]

[template public print(aNetwork : Cluster_Network) post (trim())]
networks:
  [aNetwork.name/]: 
[for (key_Values : Key_Values | aNetwork.key_values)]
    [key_Values.print()/]
[/for]
[/template]

[template public print(networks : Container_Network) post (trim())]
networks:
[for (reference : Cluster_Network | networks.references)]
  - [reference.name/]
[/for]
[/template]

[template public printStateless(aReplication : Replication) post (trim())]
deploy:
  [aReplication.printStatelessInsideDeploy()/]
[/template]

[template public printStatelessInsideDeploy(aReplication : Replication)]
replicas: [aReplication.replicas/]
[/template]

[template public print(aResources : Resources) post (trim())]
resources:
  limits:
    cpus: '[aResources.limitCPU/]'
    memory: [aResources.limitMemory/]
[if (aResources.reservationCPU <> null)]
  reservations:
    cpus: '[aResources.reservationCPU/]'
    memory: [aResources.reservationMemory/]
[/if]
[/template]

[template public printResourcesAndReplication(aContainer : Container) post (trim())]
deploy:
  [aContainer.resources.print()/]
[if (aContainer.replication <> null)]
  [aContainer.replication.printStatelessInsideDeploy()/]
[/if]
[/template]

[template public print(aProperty : Property) post (trim()) ]
	something went wrong with Rule Property
[/template]

[template public print(aProperty : Key_Values)  post (trim())]
[if (not aProperty.name.equalsIgnoreCase('version'))][aProperty.name/]: [aProperty.value/][if (aProperty.values <> null)][for (aVal : String | aProperty.values)], [aVal/][/for][/if][/if]
[/template]

[template public print(aProperty : Key_KeyValueList)  post (trim())]
[aProperty.name/]:
[for (aVar : Property | aProperty.properties)]
  [aVar.print()/]
[/for][/template]

[template public print(aProperty : Key_ValueArray)  post (trim())]
[aProperty.name/]:
[for (aValue : EString | aProperty.values)]
  - [aValue/]
[/for]
[/template]

[template public print(services : Services)  post (trim())]
	something went wrong with Rule Services
[/template]

[template public print(software : Software)  post (trim())]
[if (software.image <> null)]image: [software.image.value/][/if]
[if (software.parameters <> null)]
[for (aProperty : Property | software.parameters)]
[aProperty.print()/]
[/for]
[/if]
[if (software.environment <> null)]
[software.environment.print()/]
[/if]
[/template]

[template public print(db : DB)  post (trim())]
[db.printImage()/]
[if (db.parameters <> null)]
[for (aProperty : Property | db.parameters)]
[aProperty.print()/]
[/for]
[/if]
[if (db.credentials <> null)]
[db.printCredentials()/]
[/if]
[if ((db.environment <> null) and (db.credentials = null))]
[db.environment.print()/]
[/if]
[/template]

[template public printImage(db : DB) post (trim())]
[if (db.image <> null)]
image: [db.image.value/]
[/if]
[if (db.image = null)]
image: [db.type.image.value/]
[/if]
[/template]

[template public printCredentials(aDB : DB) post (trim())]
environment:
[if (aDB.type.name.toLower().allowsUsername())]
  [aDB.type.name.toLower().getUsernameKey()/]: [aDB.credentials.username/]
[/if]  
  [aDB.type.name.toLower().getPasswordKey()/]: [aDB.type.name.toLower().getPasswordPreValue()/][aDB.credentials.password/]
[if (aDB.environment <> null)]
[for (aProperty : Property | aDB.environment.parameters)]
  [aProperty.print()/]
[/for]
[/if]
[/template]

[template public print(aEnvironment : Environment) post (trim())]
environment:
[for (aProperty : Property | aEnvironment.parameters)]
  [aProperty.print()/]
[/for] 
[/template]
