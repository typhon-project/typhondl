[comment encoding = UTF-8 /]
[module generateKubernetesDeployment('http://www.typhon.org/dsls/xtext/TyphonDL', 'http://www.eclipse.org/emf/2002/Ecore')]

[import de::atb::typhondl::acceleo::common::utilityGenerator/]

[template public generateKubernetesDeployment(aDeploymentModel : DeploymentModel) post (trim())]
[for (aCluster : Cluster | aDeploymentModel.getAllClusters())]

[file ('polystore.yml', false, 'UTF-8')]
[for (aContainer : Container | aCluster.applications.containers)]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [aContainer.name.toLower()/]-deployment
spec:
[if (aContainer.findReplicas() <> null)]
  replicas: [aContainer.findReplicas().value/]
[/if]
  selector:
    matchLabels:
      app: [aContainer.name.toLower()/]-pod
  template:
    metadata:
      labels:
        app: [aContainer.name.toLower()/]-pod
    spec:
      containers:
        - name: [aContainer.name.toLower()/]-container
          [if (aContainer.deploys <> null)][aContainer.deploys.reference.printImage()/][/if]
          [aContainer.ports.printPorts()/]
[if (aContainer.properties <> null)]
[for (aProperty : Property | aContainer.properties)]
          [aProperty.printKubernetes()/]
[/for]
[/if]
---
kind: Service
apiVersion: v1
metadata:
  name: [aContainer.name.toLower()/]
spec:
[if (aContainer.ports.getPublishedPort()<>null)]
  type: NodePort
[/if] 
  ports:
    - port: [aContainer.ports.getTargetPort().value/]
      targetPort: [aContainer.ports.getTargetPort().value/]
  selector:
    app: [aContainer.name.toLower()/]-pod
---
[if (aContainer.name.equalsIgnoreCase('polystore-mongo'))]
kind: Job
apiVersion: batch/v1
metadata:
  name: insert-models
spec:
  template:
    spec:
      containers:
        - name: insert-models
          image: mongo:latest
          command: ['['/]"/bin/sh", "-c"[']'/]
          args:
          # wait for polystore-mongo to be ready
            - sleep 20; 
              [aContainer.printPolystoreMongo()/]
      restartPolicy: Never
[/if]
[/for]

[/file]
[/for]
[/template]

[template public printPolystoreMongo(aContainer : Container)]
mongo --host [aContainer.name/] --port [aContainer.ports.getTargetPort().value/] -u admin -p admin admin --eval [aContainer.getMongoInsert()/]
[/template]

[template public getMongoInsert(aContainer : Container)]
[for (aProperty : Property | aContainer.properties)]
[if (aProperty.name.equalsIgnoreCase('print'))]
[aProperty.printPrint()/]
[/if]
[/for]
[/template]

[template public printPrint(arg : Property) ]
ERROR
[/template]

[template public printPrint(arg : Key_Values) ]
[arg.value/]
[/template]

[template public printPrint(arg : Key_KeyValueList) ]
ERROR
[/template]

[template public printPrint(arg : Key_ValueArray) ]
ERROR
[/template]



[template public printPublishedPorts(aPorts : Ports)]
	template_expression
[/template]

[template public printPorts(aPorts : Ports)]
ports:
  - containerPort: [aPorts.getTargetPort().value/] 
[/template]

[template public printKubernetes(arg : Property) post (trim())]
something went wrong with a Property
[/template]

[template public printKubernetes(arg : Key_Values) post (trim())]
[if (arg.name.equalsIgnoreCase('replicas'))][else]
[arg.name/]: [arg.value/]
[/if]
[/template]

[template public printKubernetes(arg : Key_KeyValueList) post (trim())]
[if (arg.name.equalsIgnoreCase('environment')._or(arg.name.equalsIgnoreCase('env')))]
env:
[for (aKey_Values : Property | arg.properties)]
  - name: [aKey_Values.oclAsType(Key_Values).name/]
    value: [aKey_Values.oclAsType(Key_Values).value/]
[/for]
[/if]
[/template]

[template public printKubernetes(arg : Key_ValueArray) post (trim())]
[if (arg.name.equalsIgnoreCase('volume')._or(arg.name.equalsIgnoreCase('volumes')))]
volumeMounts:
  - name: polystore-model-storage
    mountPath: /docker-entrypoint-initdb.d
[/if]
[/template]



[template public printImage(aService : Services) post (trim())]
	template_expression
[/template]

[template public printImage(aSoftware : Software) post (trim())]
image: [aSoftware.image.value/]
[for (aProperty : Property | aSoftware.parameters)]
[aProperty.printKubernetes()/]
[/for]
[/template]

[template public printImage(aDB : DB) post (trim())]
image: [if (aDB.image <> null)][aDB.image.value/][else][aDB.type.image.value/][/if]
[for (aProperty : Property | aDB.parameters)]
[aProperty.printKubernetes()/]
[/for]
[/template]