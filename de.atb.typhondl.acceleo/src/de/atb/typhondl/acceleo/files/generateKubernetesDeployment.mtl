[comment encoding = UTF-8 /]
[module generateKubernetesDeployment('http://www.typhon.org/dsls/xtext/TyphonDL', 'http://www.eclipse.org/emf/2002/Ecore')]

[import de::atb::typhondl::acceleo::common::utilityGenerator/]

[template public generateKubernetesDeployment(aDeploymentModel : DeploymentModel) post (trim())]
[for (aCluster : Cluster | aDeploymentModel.getAllClusters())]

[file ('deploy.sh', false, 'UTF-8')]
#!/bin/bash
kubeconfig="[if (aCluster.getKubeconfig()<>null)]--kubeconfig=[aCluster.getKubeconfig().value/][/if]"
echo "Create Typhon namespace"
kubectl create namespace typhon $kubeconfig
if ['['/] -n "$kubeconfig" [']'/]; then
    echo "Using Cluster configuration file ${kubeconfig}"
fi
sleep 1
echo "----------------------------------------------------------------------------"
echo "Create databases"
kubectl apply -n typhon -f databases.yaml $kubeconfig
sleep 1
[for (aContainer : Container | aCluster.applications.containers)]
[if (not(aContainer.deploys.oclIsUndefined()))]
[if (aContainer.containsDB())]
[aContainer.helmMoreIfs()/]
[/if]
[/if]
[/for]
echo "----------------------------------------------------------------------------"
echo "Wait for the models to be inserted into the metadata database"
kubectl wait --for=condition=complete --timeout=300s -n typhon job.batch/insert-models $kubeconfig
kubectl logs job/insert-models
echo "----------------------------------------------------------------------------"
echo "Wait for all databases to be ready"
kubectl wait --for=condition=available --timeout=100s --all -n typhon deployments $kubeconfig
echo "----------------------------------------------------------------------------"
echo "Deploy Polystore"
kubectl apply -n typhon -f polystore.yaml $kubeconfig
echo "----------------------------------------------------------------------------"
echo "Wait for the API, UI and QL to be ready"
kubectl wait --for=condition=available --timeout=300s --all -n typhon deployments $kubeconfig
echo "----------------------------------------------------------------------------"
[if (aCluster.useAnalytics())]
echo "Running Typhon Kafka K8s installation ..."
kubectl create namespace kafka $kubeconfig
sleep 1
kubectl apply -n kafka -f kafka/strimzi-0.17.0/install/cluster-operator/ $kubeconfig
sleep 1
kubectl apply -n typhon -f kafka/strimzi-0.17.0/install/cluster-operator/020-RoleBinding-strimzi-cluster-operator.yaml $kubeconfig
sleep 1
kubectl apply -n typhon -f kafka/strimzi-0.17.0/install/cluster-operator/032-RoleBinding-strimzi-cluster-operator-topic-operator-delegation.yaml $kubeconfig
sleep 1
kubectl apply -n typhon -f kafka/strimzi-0.17.0/install/cluster-operator/031-RoleBinding-strimzi-cluster-operator-entity-operator-delegation.yaml $kubeconfig
sleep 2
kubectl create -n typhon -f typhon-cluster.yaml $kubeconfig
echo "Waiting for Typhon Kafka K8s deployment to complete ..."
kubectl wait kafka/typhon-cluster --for=condition=Ready --timeout=300s -n typhon $kubeconfig
echo "Typhon Kafka K8s deployment completed."
echo "Typhon Kafka K8s installation completed."
echo ""
echo "Running Typhon Flink K8s installation ..."
sleep 2
kubectl -n typhon apply -f flink/flink-configuration-configmap.yaml $kubeconfig
sleep 1
kubectl -n typhon apply -f flink/jobmanager-service.yaml $kubeconfig
sleep 1
kubectl -n typhon apply -f flink/jobmanager-deployment.yaml $kubeconfig
sleep 1
kubectl -n typhon apply -f flink/taskmanager-deployment.yaml $kubeconfig
sleep 1
echo "Typhon Flink K8s installation completed."
echo "It may take a few minutes for all services to be up and running."
[/if]
echo "Polystore installation completed."
[/file]

[file ('polystore.yaml', false, 'UTF-8')]
[for (aContainer : Container | aCluster.applications.containers)]
[if ((aContainer.name = 'typhon-polystore-service')._or(aContainer.name = 'polystore-ui')._or(aContainer.name = 'typhonql-server'))]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [aContainer.name/]-deployment
spec:
[if (aContainer.replication <> null)]
[if (aContainer.replication.mode = Modes::STATELESS)]
replicas: [aContainer.replication.replicas/]
[/if][/if]
  selector:
    matchLabels:
      app: [aContainer.name/]-pod
  template:
    metadata:
      labels:
        app: [aContainer.name/]-pod
    spec:
      containers:
        - name: [aContainer.name/]-container
          [if (aContainer.deploys <> null)][aContainer.deploys.reference.printImage()/][/if]
          [if (aContainer.ports <> null)][aContainer.ports.printPorts()/][/if]
          [if (aContainer.resources <> null)][aContainer.resources.print()/][/if]
[if (aContainer.properties <> null)]
[for (aProperty : Property | aContainer.properties)]
          [aProperty.printKubernetes()/]
[/for]
[/if]
---
kind: Service
apiVersion: v1
metadata:
  name: [aContainer.name/]
spec:
[if (aContainer.ports <> null)][if (aContainer.ports.getPublishedPort()<>null)]
  type: NodePort
[/if][/if]
  ports:
    - port: [aContainer.uri.getPort()/]
      targetPort: [aContainer.uri.getPort()/]
[if (aContainer.ports <> null)][if (aContainer.ports.getPublishedPort()<>null)]
      nodePort: [aContainer.ports.getPublishedPort().value/]
[/if][/if]
  selector:
    app: [aContainer.name/]-pod
---
[/if]
[/for]
[/file]

[file ('databases.yaml', false, 'UTF-8')]
[for (aContainer : Container | aCluster.applications.containers)]
[if (not(aContainer.deploys.oclIsUndefined()))]
[if (aContainer.containsDB())]
[aContainer.printDB()/]
[/if]
[/if]
[/for]
[/file]
[/for]
[/template]

[template public print(aResources : Resources) post (trim())]
resources:
  limits:
    memory: "[aResources.limitMemory.convertMemoryToKubernetes()/]"
    cpu: "[aResources.limitCPU.convertCPUToKubernetes()/]"
[if (aResources.reservationCPU <> null)]
  requests:
    memory: "[aResources.reservationMemory.convertMemoryToKubernetes()/]"
    cpu: "[aResources.reservationCPU.convertCPUToKubernetes()/]"
[/if]
[/template]

[template public printMongoJob(aContainer : Container) post (trim())]
[if (aContainer.name.equalsIgnoreCase('polystore-mongo'))]
kind: Job
apiVersion: batch/v1
metadata:
  name: insert-models
spec:
  template:
    spec:
      containers:
        - name: insert-models
          image: mongo:latest
          command: ['['/]"/bin/sh", "-c"[']'/]
          args:
          # wait for polystore-mongo to be ready
            - sleep 20; 
              [aContainer.printPolystoreMongo()/]
      restartPolicy: Never
---
[/if]
[/template]

[template public printDB(aContainer : Container) post (trim())]
[if (not(aContainer.useHelmChart()))]
apiVersion: apps/v1
kind: Deployment
metadata:
  name: [aContainer.name/]-deployment
spec:
  selector:
    matchLabels:
      app: [aContainer.name/]-pod
  template:
    metadata:
      labels:
        app: [aContainer.name/]-pod
    spec:
      containers:
        - name: [aContainer.name/]-container
          [if (aContainer.deploys <> null)][aContainer.deploys.reference.printImage()/]
          [aContainer.printDatabase()/][/if]
          [if (aContainer.ports <> null)][aContainer.ports.printPorts()/][/if]
          [if (aContainer.resources <> null)][aContainer.resources.print()/][/if]
[if (not aContainer.properties->isEmpty())]
[for (aProperty : Property | aContainer.properties)]
          [aProperty.printKubernetes()/]
[/for]
[/if]
---
kind: Service
apiVersion: v1
metadata:
  name: [aContainer.name/]
spec:
[if (aContainer.ports.getPublishedPort()<>null)]
  type: NodePort
[/if] 
  ports:
    - port: [aContainer.ports.getTargetPort().value/]
      targetPort: [aContainer.ports.getTargetPort().value/]
[if (aContainer.ports.getPublishedPort()<>null)]
      nodePort: [aContainer.ports.getPublishedPort().value/]
[/if]
  selector:
    app: [aContainer.name/]-pod
---
[aContainer.printMongoJob()/]
[/if]
[/template]

[template public printDatabase(aContainer : Container) ]
[let aDB : DB = aContainer.deploys.reference.oclAsType(DB)]
[if (aDB.credentials <> null)]
[aDB.printCredentials()/]
[/if]
[if ((aDB.environment <> null) and (aDB.credentials = null))]
[aDB.environment.print()/]
[/if]
[/let]
[/template]

[template public helmMoreIfs(aContainer : Container) post (trim())]
[if (aContainer.useHelmChart())]
[aContainer.printHelmCommand()/]
[/if]
[/template]

[template public printCredentials(aDB : DB) post (trim())]
environment:
[if (aDB.type.name.toLower().allowsUsername())]
  - name: [aDB.type.name.toLower().getUsernameKey()/] 
    value: [aDB.credentials.username/]
[/if]  
  - name: [aDB.type.name.toLower().getPasswordKey()/]
    value: [aDB.credentials.password/]
[if (aDB.environment <> null)]
[for (aProperty : Key_Values | aDB.environment.parameters)]
  - name: [aProperty.name/]
    value: [aProperty.value/]
[/for]
[/if]
[/template]

[template public getUsernameKey(aTypeName : String) post (trim())]
[if (aTypeName = 'mongo')]
[aTypeName.getMongoUsernameKey()/]: 
[/if]
[/template]

[template public getPasswordKey(aTypeName : String) post (trim())]
[if (aTypeName = 'mongo')][aTypeName.getMongoPasswordKey()/]: [elseif ((aTypeName = 'mariadb') or (aTypeName = 'mysql'))][aTypeName.getMariaDBPasswordKey()/]: [elseif (aTypeName = 'neo4j')][getNeo4jPasswordKey()/]
[/if]
[/template]

[template public print(aEnvironment : Environment) post (trim())]
environment:
[for (aProperty : Key_Values | aEnvironment.parameters)]
  - name: [aProperty.name/]
    value: [aProperty.value/]
[/for] 
[/template]

[template public printHelmCommand(aContainer : Container) post (trim())]
helm repo add [aContainer.getHelmRepoName()/] [aContainer.getHelmRepoAddress()/]
helm install [aContainer.name/] --set fullnameOverride=[aContainer.name/] [aContainer.addCredentials()/] [aContainer.getHelmRepoName()/]/[aContainer.getHelmChart()/] -n typhon
[/template]

[template public addCredentials (aContainer : Container) post (trim())]
[let aDB : DB = aContainer.deploys.reference.oclAsType(DB)]
[if (aDB.type.name.toLower() = 'mariadbgalera')]
--set rootUser.password=[aDB.credentials.password/]
[/if][/let]
[/template]

[template public printPolystoreMongo(aContainer : Container) post (trim())]
[let aDB : DB = aContainer.deploys.reference.oclAsType(DB)]
mongo --host [aContainer.name/] --port [aContainer.ports.getTargetPort().value/] -u [aDB.credentials.username/] -p [aDB.credentials.password/] admin --eval '[aContainer.getMongoPrint()/]';
[/let]
[/template]

[template public printPublishedPorts(aPorts : Ports)]
	template_expression
[/template]

[template public printPorts(aPorts : Ports)]
ports:
  - containerPort: [aPorts.getTargetPort().value/] 
[/template]

[template public printKubernetes(arg : Property) post (trim())]
something went wrong with a Property
[/template]

[template public printKubernetes(arg : Key_Values) post (trim())]
[arg.name/]: [arg.value/]
[/template]

[template public printKubernetes(arg : Key_KeyValueList) post (trim())]
[arg.name/]:
[for (aProperty : Property | arg.properties)]
  [aProperty.printKubernetes()/]
[/for]
[/template]

[template public printKubernetes(arg : Key_ValueArray) post (trim())]
[arg.name/]:
[for (aValue : String | arg.values)]
  - [aValue/]
[/for]
[/template]

[template public printImage(aService : Services) post (trim())]
	template_expression
[/template]

[template public printImageAndProperties(aSoftware : Software) post (trim())]
image: [aSoftware.image.value/]
[for (aProperty : Property | aSoftware.parameters)]
[aProperty.printKubernetes()/]
[/for]
[/template]

[template public printImage(aDB : DB) post (trim())]
image: [if (aDB.image <> null)][aDB.image.value/][else][aDB.type.image.value/][/if]
[/template]