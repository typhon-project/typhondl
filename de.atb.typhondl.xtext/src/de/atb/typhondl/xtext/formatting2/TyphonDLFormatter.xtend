/*
 * generated by Xtext 2.18.0.M3
 */
package de.atb.typhondl.xtext.formatting2

import com.google.inject.Inject
import de.atb.typhondl.xtext.services.TyphonDLGrammarAccess
import de.atb.typhondl.xtext.typhonDL.Application
import de.atb.typhondl.xtext.typhonDL.Cluster
import de.atb.typhondl.xtext.typhonDL.Cluster_Network
import de.atb.typhondl.xtext.typhonDL.Container
import de.atb.typhondl.xtext.typhonDL.ContainerType
import de.atb.typhondl.xtext.typhonDL.DB
import de.atb.typhondl.xtext.typhonDL.DBType
import de.atb.typhondl.xtext.typhonDL.DeploymentModel
import de.atb.typhondl.xtext.typhonDL.IMAGE
import de.atb.typhondl.xtext.typhonDL.Import
import de.atb.typhondl.xtext.typhonDL.Key_KeyValueList
import de.atb.typhondl.xtext.typhonDL.Key_ValueArray
import de.atb.typhondl.xtext.typhonDL.Software
import de.atb.typhondl.xtext.typhonDL.Platform
import de.atb.typhondl.xtext.typhonDL.PlatformType
import org.eclipse.xtext.formatting2.AbstractFormatter2
import org.eclipse.xtext.formatting2.IFormattableDocument
import de.atb.typhondl.xtext.typhonDL.Key_Values
import de.atb.typhondl.xtext.typhonDL.ClusterType
import de.atb.typhondl.xtext.typhonDL.Ports

class TyphonDLFormatter extends AbstractFormatter2 {

	@Inject extension TyphonDLGrammarAccess

	def dispatch void format(DeploymentModel deploymentModel, extension IFormattableDocument document) {
		for (metaModel : deploymentModel.guiMetaInformation) {
			metaModel.format
		}
		for (model : deploymentModel.elements) {
			model.format
		}
	}

	def dispatch void format(Import imported, extension IFormattableDocument document) {
		imported.append[newLine]
	}

	def dispatch void format(Software software, extension IFormattableDocument document) {
		interior(
			software.regionFor.keyword('{').append[newLine],
			software.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		software.image.format
		for (property : software.parameters) {
			property.format
			property.append[newLine]
		}
	}

	def dispatch void format(DB db, extension IFormattableDocument document) {
		interior(
			db.regionFor.keyword('{').append[newLine],
			db.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		db.image.format
		for (property : db.parameters) {
			property.format
			property.append[newLine]
		}
	}
	
	def dispatch void format(Ports ports, extension IFormattableDocument document) {
		interior(
			ports.regionFor.keyword('{').append[newLine],
			ports.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		for (port : ports.key_values) {
			port.format
		}
	}

	def dispatch void format(IMAGE image, extension IFormattableDocument document) {
		image.append[newLine]
	}

	def dispatch void format(PlatformType platformType, extension IFormattableDocument document) {
		platformType.append[newLine]
	}

	def dispatch void format(ContainerType containerType, extension IFormattableDocument document) {
		containerType.append[newLine]
	}
	
	def dispatch void format(ClusterType clusterType, extension IFormattableDocument document) {
		clusterType.append[newLine]
	}

	def dispatch void format(DBType dbType, extension IFormattableDocument document) {
		interior(
			dbType.regionFor.keyword('{').append[newLine],
			dbType.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		dbType.image.format
		for (image : dbType.images) {
			image.format
		}
	}

	def dispatch void format(Platform platform, extension IFormattableDocument document) {
		interior(
			platform.regionFor.keyword('{').append[newLine],
			platform.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		for (cluster : platform.clusters) {
			cluster.format
		}
	}

	def dispatch void format(Cluster cluster, extension IFormattableDocument document) {
		interior(
			cluster.regionFor.keyword('{').append[newLine],
			cluster.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		for (network : cluster.networks) {
			network.append[newLine]
			network.format
		}
		for (app : cluster.applications) {
			app.format
		}
	}

	def dispatch void format(Cluster_Network network, extension IFormattableDocument document) {
		interior(
			network.regionFor.keyword('{').append[newLine],
			network.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		network.append[newLine]
		for (key_value : network.key_values) {
			key_value.format
		}
	}

	def dispatch void format(Application app, extension IFormattableDocument document) {
		interior(
			app.regionFor.keyword('{').append[newLine],
			app.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		for (container : app.containers) {
			container.format
		}
	}

	def dispatch void format(Container container, extension IFormattableDocument document) {
		interior(
			container.regionFor.keyword('{').append[newLine],
			container.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		for (depends_on : container.depends_on) {
			depends_on.append[newLine]
		}
		container.deploys.append[newLine]
		container.networks.append[newLine]
		container.ports.format
		
		for (property : container.properties) {
			property.format
		}
	}

	def dispatch void format(Key_Values key_values, extension IFormattableDocument document) {
		key_values.append[newLine]
	}

	def dispatch void format(Key_ValueArray key_valueArray, extension IFormattableDocument document) {
		key_valueArray.append[newLine]
	}

	def dispatch void format(Key_KeyValueList key_keyValueList, extension IFormattableDocument document) {
		interior(
			key_keyValueList.regionFor.keyword('{').append[newLine],
			key_keyValueList.regionFor.keyword('}').prepend[newLine].append[newLine],
			[indent]
		)
		for (propertiy : key_keyValueList.properties) {
			propertiy.format
		}
	}

}
