/*
 * generated by Xtext 2.15.0
 */
package org.typhon.dsls.xtext.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.typhon.dsls.xtext.services.TyphonDLGrammarAccess;
import org.typhon.dsls.xtext.typhonDL.Application;
import org.typhon.dsls.xtext.typhonDL.Assignment;
import org.typhon.dsls.xtext.typhonDL.AssignmentList;
import org.typhon.dsls.xtext.typhonDL.BusinessService;
import org.typhon.dsls.xtext.typhonDL.Cluster;
import org.typhon.dsls.xtext.typhonDL.CommaSeparatedAssignmentList;
import org.typhon.dsls.xtext.typhonDL.Container;
import org.typhon.dsls.xtext.typhonDL.DBService;
import org.typhon.dsls.xtext.typhonDL.DBType;
import org.typhon.dsls.xtext.typhonDL.DataType;
import org.typhon.dsls.xtext.typhonDL.DeploymentModel;
import org.typhon.dsls.xtext.typhonDL.Entity;
import org.typhon.dsls.xtext.typhonDL.EnvList;
import org.typhon.dsls.xtext.typhonDL.Feature;
import org.typhon.dsls.xtext.typhonDL.Platform;
import org.typhon.dsls.xtext.typhonDL.PlatformType;
import org.typhon.dsls.xtext.typhonDL.TyphonDLPackage;

@SuppressWarnings("all")
public class TyphonDLSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private TyphonDLGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == TyphonDLPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case TyphonDLPackage.APPLICATION:
				sequence_Application(context, (Application) semanticObject); 
				return; 
			case TyphonDLPackage.ASSIGNMENT:
				sequence_Assignment(context, (Assignment) semanticObject); 
				return; 
			case TyphonDLPackage.ASSIGNMENT_LIST:
				sequence_AssignmentList(context, (AssignmentList) semanticObject); 
				return; 
			case TyphonDLPackage.BUSINESS_SERVICE:
				sequence_BusinessService(context, (BusinessService) semanticObject); 
				return; 
			case TyphonDLPackage.CLUSTER:
				sequence_Cluster(context, (Cluster) semanticObject); 
				return; 
			case TyphonDLPackage.COMMA_SEPARATED_ASSIGNMENT_LIST:
				sequence_CommaSeparatedAssignmentList(context, (CommaSeparatedAssignmentList) semanticObject); 
				return; 
			case TyphonDLPackage.CONTAINER:
				sequence_Container(context, (Container) semanticObject); 
				return; 
			case TyphonDLPackage.DB_SERVICE:
				sequence_DBService(context, (DBService) semanticObject); 
				return; 
			case TyphonDLPackage.DB_TYPE:
				sequence_DBType(context, (DBType) semanticObject); 
				return; 
			case TyphonDLPackage.DATA_TYPE:
				sequence_DataType(context, (DataType) semanticObject); 
				return; 
			case TyphonDLPackage.DEPLOYMENT_MODEL:
				sequence_DeploymentModel(context, (DeploymentModel) semanticObject); 
				return; 
			case TyphonDLPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case TyphonDLPackage.ENV_LIST:
				sequence_EnvList(context, (EnvList) semanticObject); 
				return; 
			case TyphonDLPackage.FEATURE:
				sequence_Feature(context, (Feature) semanticObject); 
				return; 
			case TyphonDLPackage.PLATFORM:
				sequence_Platform(context, (Platform) semanticObject); 
				return; 
			case TyphonDLPackage.PLATFORM_TYPE:
				sequence_PlatformType(context, (PlatformType) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Type returns Application
	 *     Deployment returns Application
	 *     Application returns Application
	 *
	 * Constraint:
	 *     (name=ID containers+=Container*)
	 */
	protected void sequence_Application(ISerializationContext context, Application semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns AssignmentList
	 *     AssignmentList returns AssignmentList
	 *
	 * Constraint:
	 *     (name=ID assignments+=Assignment+)
	 */
	protected void sequence_AssignmentList(ISerializationContext context, AssignmentList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns Assignment
	 *     Assignment returns Assignment
	 *
	 * Constraint:
	 *     (name=ID value=Value)
	 */
	protected void sequence_Assignment(ISerializationContext context, Assignment semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonDLPackage.Literals.ASSIGNMENT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonDLPackage.Literals.ASSIGNMENT__NAME));
			if (transientValues.isValueTransient(semanticObject, TyphonDLPackage.Literals.ASSIGNMENT__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonDLPackage.Literals.ASSIGNMENT__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAssignmentAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAssignmentAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns BusinessService
	 *     Deployment returns BusinessService
	 *     Service returns BusinessService
	 *     BusinessService returns BusinessService
	 *
	 * Constraint:
	 *     (name=ID features+=Feature*)
	 */
	protected void sequence_BusinessService(ISerializationContext context, BusinessService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Cluster
	 *     Deployment returns Cluster
	 *     Cluster returns Cluster
	 *
	 * Constraint:
	 *     (name=ID applications+=Application*)
	 */
	protected void sequence_Cluster(ISerializationContext context, Cluster semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns CommaSeparatedAssignmentList
	 *     CommaSeparatedAssignmentList returns CommaSeparatedAssignmentList
	 *
	 * Constraint:
	 *     (name=ID value=Value values+=Value*)
	 */
	protected void sequence_CommaSeparatedAssignmentList(ISerializationContext context, CommaSeparatedAssignmentList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Container
	 *     Deployment returns Container
	 *     Container returns Container
	 *
	 * Constraint:
	 *     (name=ID (properties+=Property | features+=Feature)*)
	 */
	protected void sequence_Container(ISerializationContext context, Container semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns DBService
	 *     Deployment returns DBService
	 *     Service returns DBService
	 *     DBService returns DBService
	 *
	 * Constraint:
	 *     (name=ID features+=Feature*)
	 */
	protected void sequence_DBService(ISerializationContext context, DBService semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns DBType
	 *     DBType returns DBType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DBType(ISerializationContext context, DBType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonDLPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonDLPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDBTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns DataType
	 *     DataType returns DataType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_DataType(ISerializationContext context, DataType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonDLPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonDLPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDataTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DeploymentModel returns DeploymentModel
	 *
	 * Constraint:
	 *     elements+=Type+
	 */
	protected void sequence_DeploymentModel(ISerializationContext context, DeploymentModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=ID superType=[Entity|ID]? features+=Feature*)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Property returns EnvList
	 *     EnvList returns EnvList
	 *
	 * Constraint:
	 *     environmentVars+=MYSTRING+
	 */
	protected void sequence_EnvList(ISerializationContext context, EnvList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Feature returns Feature
	 *
	 * Constraint:
	 *     (name=ID type=[Type|ID])
	 */
	protected void sequence_Feature(ISerializationContext context, Feature semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonDLPackage.Literals.FEATURE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonDLPackage.Literals.FEATURE__NAME));
			if (transientValues.isValueTransient(semanticObject, TyphonDLPackage.Literals.FEATURE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonDLPackage.Literals.FEATURE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getFeatureAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getFeatureAccess().getTypeTypeIDTerminalRuleCall_2_0_1(), semanticObject.eGet(TyphonDLPackage.Literals.FEATURE__TYPE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns PlatformType
	 *     PlatformType returns PlatformType
	 *
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_PlatformType(ISerializationContext context, PlatformType semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, TyphonDLPackage.Literals.TYPE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, TyphonDLPackage.Literals.TYPE__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getPlatformTypeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Type returns Platform
	 *     Deployment returns Platform
	 *     Platform returns Platform
	 *
	 * Constraint:
	 *     (name=ID type=[PlatformType|ID] clusters+=Cluster*)
	 */
	protected void sequence_Platform(ISerializationContext context, Platform semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
